from typing import Sequence, Union

class Memcmp:
    def __init__(
        self,
        offset: int,
        bytes_: Union[str, Sequence[int], bytes],
    ): ...
    @property
    def offset(self) -> int: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def __richcmp__(self, other: "Memcmp", op: int) -> bool: ...
    def __bytes__(self) -> bytes: ...
    def to_json(self) -> str: ...
    @staticmethod
    def from_json(raw: str) -> "Memcmp": ...

class RpcFilterTypeFieldless:
    TokenAccountState: "RpcFilterTypeFieldless"
    def __int__(self) -> int: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __eq__(self, o: object) -> bool: ...
    @staticmethod
    def from_string(s: str) -> "RpcFilterTypeFieldless": ...
    @staticmethod
    def default() -> "RpcFilterTypeFieldless": ...

RpcFilterType = Union[int, Memcmp, RpcFilterTypeFieldless]
